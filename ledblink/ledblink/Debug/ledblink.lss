
ledblink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000805  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000698  00000000  00000000  00000a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include<avr/interrupt.h>

int main (void)
{
     
     sei(); //enable interuupt
  80:	78 94       	sei
	 EIMSK=1<<INT0;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	8d bb       	out	0x1d, r24	; 29
	 EICRA=1<<0|0<<1;
  86:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	 DDRD = 1<<4|1<<5|1<<6;
  8a:	80 e7       	ldi	r24, 0x70	; 112
  8c:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	89 e6       	ldi	r24, 0x69	; 105
  92:	98 e1       	ldi	r25, 0x18	; 24
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1e>
  9e:	00 00       	nop
	while(1)
	{
		_delay_ms(500);
		PORTD = 1<<4;
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	8b b9       	out	0x0b, r24	; 11
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	89 e6       	ldi	r24, 0x69	; 105
  a8:	98 e1       	ldi	r25, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
		_delay_ms(500);
		PORTD = 1<<5;
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
		_delay_ms(500);
		PORTD = 1<<6;
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	de cf       	rjmp	.-68     	; 0x8e <main+0xe>

000000d2 <__vector_1>:
		
	
}

ISR(INT0_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	int i=0;   
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
	while (i<3)
  ea:	16 c0       	rjmp	.+44     	; 0x118 <__vector_1+0x46>
	{
		PORTD=1<<4|1<<5|1<<6;
  ec:	20 e7       	ldi	r18, 0x70	; 112
  ee:	2b b9       	out	0x0b, r18	; 11
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	39 e6       	ldi	r19, 0x69	; 105
  f4:	48 e1       	ldi	r20, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_1+0x24>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_1+0x2e>
 100:	00 00       	nop
		_delay_ms(500);
		PORTD=0;
 102:	1b b8       	out	0x0b, r1	; 11
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	33 ed       	ldi	r19, 0xD3	; 211
 108:	40 e3       	ldi	r20, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	40 40       	sbci	r20, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <__vector_1+0x38>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__vector_1+0x42>
 114:	00 00       	nop
		_delay_ms(1000);
		i++;
 116:	01 96       	adiw	r24, 0x01	; 1
}

ISR(INT0_vect)
{
	int i=0;   
	while (i<3)
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	91 05       	cpc	r25, r1
 11c:	3c f3       	brlt	.-50     	; 0xec <__vector_1+0x1a>
		PORTD=0;
		_delay_ms(1000);
		i++;
		
	}
	cli();
 11e:	f8 94       	cli
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
